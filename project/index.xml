<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Projects Examples | Home</title>
    <link>https://example.com/project/</link>
      <atom:link href="https://example.com/project/index.xml" rel="self" type="application/rss+xml" />
    <description>Some Projects Examples</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 24 Oct 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hud9e2f43ab6f21cec988f7b26ad197544_2176_512x512_fill_lanczos_center_3.png</url>
      <title>Some Projects Examples</title>
      <link>https://example.com/project/</link>
    </image>
    
    <item>
      <title>Formal modeling of moving block signaling system</title>
      <link>https://example.com/project/project/formal-modeling-of-moving-block-signaling-system/</link>
      <pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/project/formal-modeling-of-moving-block-signaling-system/</guid>
      <description>&lt;p&gt;ERTMS/ETCS is a railway signaling system that aims to unify signaling systems across European countries to improve the safety and capacity of railway domains.&lt;/p&gt;
&lt;p&gt;To facilitate the deployment, ERTMS/ETCS is designed into 3 levels. The Moving Block signaling system is a variant of ERTM/ETCS level 3 that uses as few trackside components as possible and relies on direct communication between Trains and a trackside safety unit called RBC.&lt;/p&gt;
&lt;p&gt;In this project, we aim to check if networked attacks over the communication channel between RBC and a train can result in unintended train movement. To do so, we provide a model of the system using SysML diagrams and then translate the model automatically into an Event-B model. Then we specify an unintended train movement as a logical expression and prove its negation as an invariant of the Event-B model.&lt;/p&gt;
&lt;p&gt;The result of the analysis shows that if the variables are defined properly in the Moving Block requirements specification, then networked attacks do not have safety implication.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EBSysMLSec</title>
      <link>https://example.com/project/project/ebsysmlsec/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/project/ebsysmlsec/</guid>
      <description>&lt;p&gt;EBSysMLSec is a translation tool that takes a SysML model as an input and generates the corresponding Event-B model. The tool is used only in the context of networked control system (NCS) i.e., the input must agree with a specifc style of modeling adopted for specifing a NCS using SysML, details could be found in papers [1,2].&lt;/p&gt;
&lt;p&gt;To develope EBSysMLSec, we use ATL- a model transformation language. ATL provides a way to genrate several target models from a sorce model. An ATL transformation program consists of several rules that specify how source model elements are matched with target model elements. The implemenation of EBSysMLSec contains four programs (.atl files). Each program takes the input SysML model and generates an Event-B component (either a Machine or a Context). All generated Event-B components form the output of EBSysMLSec.&lt;/p&gt;
&lt;p&gt;Run:&lt;/p&gt;
&lt;p&gt;Install Eclipse modeling tool.
Install ATL plugin.
Create an Atl project
For each program, create an atl file. Creating the file, choose UML ecore as an input metamodel and eventbcore as an output metamodel. UML metamodel exists as a registered package, but eventbcore need to be downloaded from &lt;a href=&#34;https://sourceforge.net/projects/rodin-b-sharp/files/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sourceforge.net/projects/rodin-b-sharp/files/&lt;/a&gt;.
For each program, configure a run and specify the input SysMl model and an directory for the generated .xmb model. An example of input model is provided in the repository (MovingBlockSysml).
Run the configurations and open the generated files with rose editor in Rodin.
Specify the refinemnt chain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RBC ID block assignment</title>
      <link>https://example.com/project/project/rbc-id-block-assignment/</link>
      <pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/project/rbc-id-block-assignment/</guid>
      <description>&lt;p&gt;The RBC is a device used at ERTMS/ETCS signaling systems acting as a safety unit, which, using radio connection via GSM-R, to communicate with trains in a specifc area. RBCs within a region are netweoked and exchanged data to control the trains movement.&lt;/p&gt;
&lt;p&gt;Trafikverket, Swedish Transport Administration, requires reassign (or assgining new) ID block of some of their RBCs such that no adjecent RBCs have identical IDs while minimizing the cost.&lt;/p&gt;
&lt;p&gt;In this project, we formulate the problem as a variant of Graph coloring problem and develop an algorithm to generete the optimal ID block assignment to RBCs. The algorithm is developed in Python uisng Networkx. The implementation takes the current RBC network as an XML file and generate a graph of RBC with new assignments in GraphML format.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deductive verification of an ABS controller</title>
      <link>https://example.com/project/project/deductive-verification-of-an-abs-controller/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/project/deductive-verification-of-an-abs-controller/</guid>
      <description>&lt;p&gt;This project was a part of formal methods course at KTH.&lt;br&gt;
We use the WP plugin of Frama-C to formally verify a C
program controlling an anti-lock braking system (ABS) of a car. In this project, the Description of the system functionality and the implemenation of the system in C have been given. As a required task, we formally specify several (safety and liveness) properties and verify them using Frama-C. To do so, we analyze the algorithms and the code to annotate the program and write contracts for each implemented function using ACSL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Model checking of a device driver of a transmitter</title>
      <link>https://example.com/project/project/model-checking-of-a-device-driver-of-a-transmitter/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/project/model-checking-of-a-device-driver-of-a-transmitter/</guid>
      <description>&lt;p&gt;This project was a part of formal methods course at KTH. We
Make models in NuSMV of a transmitter and the device driver control
ling the transmitter. We then express some properties in CTL and check whether the NuSMV model satisfies them. One example of such a check is to verify that the device
driver does not configure the transmitter into an unknown state where
the behavior of the transmitter is not specified. If the transmitter
enters such a state, it could do anything, e.g. transmitting confidential
data in memory. We check more than 10 properties in this project.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
